{"version":3,"sources":["components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/api.ts","api/posts.ts","api/comments.ts","components/PostDetails/PostDetails.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","handleSetPostId","selectedPostId","className","map","post","userId","title","id","type","onClick","NewCommentForm","postId","addNewComment","useState","newName","setNewName","newEmail","setNewEmail","newBody","setNewBody","newComment","nanoid","name","email","body","onSubmit","e","preventDefault","required","value","placeholder","onChange","event","target","request","url","options","a","fetch","response","ok","Error","status","statusText","json","getPostDetailes","method","getUserPosts","filter","getUsers","getComments","comments","comment","PostDetails","setPost","setComments","isCommentHidden","setIsCommentHidden","useEffect","Promise","all","currentPost","currentComments","fetchPost","handleDeleteCommentBtn","commentId","deleteComment","then","result","length","disabled","headers","JSON","stringify","Loader","App","setPosts","users","setUsers","setSelectedPostId","isLoading","setIsLoading","postsFromServer","usersFromServer","console","error","fetchPosts","filterPostsByUserid","filteredPosts","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6aa4dcd.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  handleSetPostId: (id:number) => void;\n  selectedPostId: Post['id'];\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, handleSetPostId, selectedPostId }) => (\n\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>{`[User #${post.userId}]: `}</b>\n            {post.title}\n          </div>\n          {selectedPostId === post.id ? (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleSetPostId(0)}\n            >\n              Close\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleSetPostId(post.id)}\n            >\n              Open\n            </button>\n          )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { nanoid } from 'nanoid';\nimport { Comment } from '../../types/comment';\n\ntype Props = {\n  postId: number;\n  addNewComment: (newComment: Comment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, addNewComment }) => {\n  const [newName, setNewName] = useState<string>('');\n  const [newEmail, setNewEmail] = useState<string>('');\n  const [newBody, setNewBody] = useState<string>('');\n\n  const newComment: Comment = {\n    postId,\n    id: +nanoid(),\n    name: newName,\n    email: newEmail,\n    body: newBody,\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    addNewComment(newComment);\n    setNewName('');\n    setNewEmail('');\n    setNewBody('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={(e) => handleSubmit(e)}>\n      <div className=\"form-field\">\n        <input\n          required\n          type=\"text\"\n          name=\"name\"\n          value={newName}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setNewName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          required\n          type=\"text\"\n          name=\"email\"\n          value={newEmail}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setNewEmail(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          required\n          name=\"body\"\n          value={newBody}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setNewBody(event.target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string, options: RequestInit | undefined) => {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}: ${response.statusText}`);\n  }\n\n  return response.json();\n};\n","import { request } from './api';\n\nexport const getPostDetailes = async (id:number) => {\n  const post = await request(`/posts/${id}`, { method: 'GET' });\n\n  return post;\n};\n\nexport const getUserPosts = async (id = 0) => {\n  const posts = await request('/posts', { method: 'GET' });\n\n  if (id === 0) {\n    return posts;\n  }\n\n  return posts.filter((post: Post) => post.userId === id);\n};\n\nexport const getUsers = () => request('/users', { method: 'GET' });\n","import { request } from './api';\nimport { Comment } from '../types/comment';\n\nexport const getComments = async (postId:number) => {\n  const comments = await request('/comments', { method: 'GET' });\n\n  return comments.filter((comment: { postId: number; }) => comment.postId === postId);\n};\n\nexport const deleteComment = (commentId: number) => {\n  const options = {\n    method: 'DELETE',\n  };\n\n  return request(`/comments/${commentId}`, options);\n};\n\nexport const postComment = (comment: Comment) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify(comment),\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetailes } from '../../api/posts';\nimport { getComments, deleteComment, postComment } from '../../api/comments';\nimport { Comment } from '../../types/comment';\nimport './PostDetails.scss';\n\ntype Props = {\n  id: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ id }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentHidden, setIsCommentHidden] = useState(false);\n\n  useEffect(() => {\n    async function fetchPost() {\n      const [currentPost, currentComments] = await Promise.all([\n        getPostDetailes(id),\n        getComments(id),\n      ]);\n\n      setPost(currentPost);\n      setComments(currentComments);\n    }\n\n    fetchPost();\n  }, [id]);\n\n  const toggleCommentsDisplay = () => {\n    setIsCommentHidden(!isCommentHidden);\n  };\n\n  const handleDeleteCommentBtn = (commentId: Comment['id']) => {\n    deleteComment(commentId)\n      .then(() => getComments(id)\n        .then(result => setComments(result)));\n  };\n\n  const addNewComment = (newComment: Comment) => {\n    postComment(newComment)\n      .then(() => getComments(id)\n        .then(result => setComments(result)));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length > 0\n          ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={toggleCommentsDisplay}\n            >\n              {isCommentHidden\n                ? 'Show' : 'Hide'}\n              {` ${comments.length} `}\n              {comments.length === 1 ? 'comment' : 'comments'}\n            </button>\n          ) : (\n            <button\n              disabled\n              type=\"button\"\n              className=\"button\"\n            >\n              No comments yet\n            </button>\n          )}\n        <ul className=\"PostDetails__list\">\n          {!isCommentHidden && (\n            comments.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => handleDeleteCommentBtn(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            )))}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={id} addNewComment={addNewComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable no-console */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers, getUserPosts } from './api/posts';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    async function fetchPosts() {\n      try {\n        const postsFromServer = await getUserPosts();\n        const usersFromServer = await getUsers();\n\n        setUsers(usersFromServer);\n        setPosts(postsFromServer);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(error);\n        setIsLoading(false);\n      }\n    }\n\n    fetchPosts();\n  }, []);\n\n  const filterPostsByUserid = async (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const id = +e.target.value;\n\n    const filteredPosts = await getUserPosts(id);\n\n    setPosts(filteredPosts);\n  };\n\n  const handleSetPostId = (id:number) => {\n    setSelectedPostId(id);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={filterPostsByUserid}\n          >\n            <option value=\"0\">All users</option>\n            {users && users.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoading ? (<Loader />) : (\n            <PostsList\n              posts={posts}\n              handleSetPostId={handleSetPostId}\n              selectedPostId={selectedPostId}\n            />\n          )}\n        </div>\n\n        {selectedPostId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails id={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}